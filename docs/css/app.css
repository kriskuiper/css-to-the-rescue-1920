:root {
    --spacing-large: 4rem;
    --spacing-default: 2rem;
    --spacing-small: 1rem;

    --font-size-tiny: 0.865rem;
    --font-size-small: 1.25rem;
    --font-size-default: 2rem;
    --font-size-large: 4rem;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-size: var(--font-size-small);
    font-family: Arial, Helvetica, sans-serif;
    cursor: default;
    overflow-x: hidden;
}

/* Old header styles, just for showing purposes so that I can verify that I've build it like this */
header {
    display: flex;
    padding: 1rem;
    z-index: 999;
}

header > div {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 0 var(--spacing-small);
    border-left: 1px solid;
    border-right: 1px solid;
}

header > div > input {
    position: absolute;
    transform: translateX(-9999px)
}

header > div > nav {
    --nav-faster-duration: .6s;
    --nav-transition-duration: .8s;
    --nav-delayed-duration: 1s;

    position: fixed;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    top: 0;
    right: 0;
    width: 100%;
    height: 100vh;
    overflow: hidden;
    background: rgb(0, 0, 255);
    z-index: 99;
    transition: all var(--nav-transition-duration) ease-in-out;
    clip-path: circle(0px at 100% 0px);
}

header > ul > li {
    z-index: 100;
    transform: rotate(-90deg);
    font-size: var(--font-size-tiny);
}

header > div > input:checked + nav {
    clip-path: circle(300vw at 100% 0px);
    width: 100%;
    height: 100vh;
}

header > div > input:checked ~ label {
    color: white;
}

header > div > nav li {
    transition: all var(--nav-faster-duration) ease-in-out;
    opacity: 0;
    transform: translateY(-5px);
    font-size: var(--font-size-large);
}

header > div > nav li > a {
    text-decoration: none;
    display: block;
    padding: 1rem 0;
    color: white;
}

header > div > input:checked + nav li {
    opacity: 1;
    transform: translateY(0);
}

header > div > input:checked + nav li:nth-child(1) {
    transition-delay: var(--nav-faster-duration);
}

header > div > input:checked + nav li:nth-child(2) {
    transition-delay: var(--nav-transition-duration);
}

header > div > input:checked + nav li:nth-child(3) {
    transition-delay: var(--nav-delayed-duration);
}

@media (pointer: none) {
    /*
        User uses touching device, place menu button in reach and
        make nav do things from bottom
    */
}
/* === End old header styles === */

/* Title styling */
h1 {
    margin-bottom: 50px;
    font-size: calc(8vw + var(--font-size-default));
    font-weight: 500;
    flex-grow: 1;
    color: rgb(255, 0, 0);
    -webkit-text-stroke-width: 2px;
    -webkit-text-stroke-color: rgb(2, 2, 2);
}

h1::before,
h1::after {
    position: absolute;

    /* 
        Awesome! I didn't know I could reference a data attribute in css and use it for the content of a
        before and after. Now it reads just as one string for a screen reader for example while other users
        can see the cool effect :D
    */
    content: attr(data-text);
}

h1:before {
    top: 20px;
    left: 20px;
    color: rgb(0, 0, 255);
}

h1:after {
    top: 25px;
    left: 25px;
    color: rgb(0, 255, 0);
}

body > div {
    overflow: hidden;
}

body > div > div {
    margin: -0.5vw
}

body > div > div {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 100px;
    padding: 0;
    grid-auto-flow: dense;
    list-style: none;
    /* Avoids breaking the layout to fit on next page */
    page-break-after: avoid;
    page-break-before: avoid;
    page-break-inside: avoid;
}

input[type="checkbox"] {
    display: none;
    /* Avoids breaking the layout to fit on next page */
    page-break-after: avoid;
    page-break-before: avoid;
    page-break-inside: avoid;
}

body > div > div > input[type="checkbox"] + label {
    border: 0.5vw solid black;
}

/*
    Using :nth-of-type() because it's less of a struggle with your mind here.
    1st, 3rd, 5th element is a checkbox instead of just 1st, 2nd, 3rd etc.

    Also using the cicada principle to create some pseudo randomness:
    https://www.lottejackson.com/learning/nth-child-cicada-principle
*/

body > div > div > input[type="checkbox"]:nth-of-type(2n + 1) + label {
    grid-column: span 2;
    grid-row: span 1;
}

body > div > div > input[type="checkbox"]:nth-of-type(2n + 1):checked + label {
    grid-column: span 3;
    grid-row: span 4;
}

body > div > div > input[type="checkbox"]:nth-of-type(3n + 2) + label {
    grid-column: span 1;
    grid-row: span 2;
    background: rgb(20, 20, 20);
}

body > div > div > input[type="checkbox"]:nth-of-type(3n + 2):checked + label {
    grid-column: span 1;
    grid-row: span 1;
    background: rgb(20, 20, 20);
}

body > div > div > input[type="checkbox"]:nth-of-type(5n + 3) + label {
    grid-column: span 2;
    grid-row: span 1;
    background: rgb(255, 0, 0);
}

body > div > div > input[type="checkbox"]:nth-of-type(5n + 3):checked + label {
    grid-column: span 2;
    grid-row: span 3;
    background: rgb(255, 0, 0);
}

body > div > div > input[type="checkbox"]:nth-of-type(7n + 5) + label {
    grid-column: span 2;
    grid-row: span 2;
    background: rgb(0, 255, 0);
}

body > div > div > input[type="checkbox"]:nth-of-type(7n + 5):checked + label {
    grid-column: span 1;
    grid-row: span 2;
    background: rgb(0, 255, 0);
}

body > div > div input[type="checkbox"]:nth-of-type(11n + 9) + label {
    grid-column: span 3;
    grid-row: span 3;
    background: rgb(0, 0, 255);
}

body > div > div input[type="checkbox"]:nth-of-type(11n + 9):checked + label {
    grid-column: span 2;
    grid-row: span 1;
    background: rgb(0, 0, 255);
}

/* Button styles */
body > p {
    position: fixed;
    right: var(--spacing-small);
    bottom: var(--spacing-small);
}

body > p > span {
    display: none;
    font-size: var(--font-size-tiny);
    width: 30rem;
    background: yellow;
    padding: var(--spacing-small);
    margin-bottom: 1rem;
}

body > p > button {
    border: 0;
    padding: var(--spacing-small) var(--spacing-default);
    font-size: var(--font-size-small);
    background: yellow;
    position: relative;
    z-index: 0;
    overflow: hidden;
}

body > p > button:after {
    top: 0;
    left: -25%;
    content: "";
    position: absolute;
    height: 100%;
    width: 150%;
    background: red;
    z-index: -1;
    transform: translateX(-100%);
    transition: transform .3s ease-in-out
}

body > p > button:hover:after {
    transform: translateX(0);
}

body > p:hover {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

body > p:hover > span {
    display: block;
}

body > p ~ p {
    display: none;
    font-size: var(--font-size-small);
    background: yellow;
    padding: var(--spacing-small);
}


@media print {
    /* Remove unecessary sections */
    body > header,
    body > p {
        display: none !important;
    }

    /* Use page-break or something to avoid breaking the page */
}

@media (prefers-reduced-motion: reduce) {
    * {
        transition: none !important;
        animation: none !important;
    }
}

/* @media (pointer: none) {

    body > p ~ p {
        display: block !important;
    }
} */